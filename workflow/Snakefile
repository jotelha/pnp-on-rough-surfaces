from snakemake.utils import min_version
min_version("6.0")

configfile: "workflow/config.yml"

out_prefix = config["out_prefix"]
in_prefix = config["in_prefix"]

frequency_values = config["frequency_values"]
amplitude_values = config["amplitude_values"]

reference_profile_label = config["reference_profile_label"]

number_of_species = len(config["number_charges"])

potential_bias_values = config["potential_bias_values"]

length_scale_values = config["length_scale_values"]
signal_variance_values = config["signal_variance_values"]

long_length_scale_values = config["long_length_scale_values"]
long_signal_variance_values = config["long_signal_variance_values"]

rule generate:
    output:
        profile_csv=f"{out_prefix}/profiles/frequency_{{frequency}}_amplitude_{{amplitude}}.csv"
    log:
        f"{out_prefix}/profiles/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/generate_cosine_rough_surfaces.py"

rule compute_roughness_properties:
    input:
        profile_csv=f"{out_prefix}/profiles/frequency_{{frequency}}_amplitude_{{amplitude}}.csv"
    output:
         json_file=f"{out_prefix}/roughness_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json"
    log:
        f"{out_prefix}/roughness_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/compute_roughness_properties.py"

rule compute_profile_properties:
    input:
        profile_csv=f"{out_prefix}/profiles/frequency_{{frequency}}_amplitude_{{amplitude}}.csv"
    output:
        json_file=f"{out_prefix}/potential_{{potential}}/profile_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json"
    log:
        f"{out_prefix}/potential_{{potential}}/profile_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/compute_profile_properties.py"

rule aggregate_profile_properties:
    input:
        expand(f"{out_prefix}/potential_{{{{potential}}}}/profile_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json", frequency=frequency_values, amplitude=amplitude_values)
    output:
        csv_file=f"{out_prefix}/potential_{{potential}}/profile_properties/profile_properties.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file, index=False)

rule aggregate_roughness_properties:
    input:
        expand(f"{out_prefix}/roughness_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json", frequency=frequency_values, amplitude=amplitude_values)
    output:
        csv_file=f"{out_prefix}/roughness_properties/roughness_properties.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file, index=False)

rule mesh:
    input:
        profile_csv=f"{out_prefix}/profiles/frequency_{{frequency}}_amplitude_{{amplitude}}.csv"
    output:
        geometry_geo=f"{out_prefix}/geometries/frequency_{{frequency}}_amplitude_{{amplitude}}.geo_unrolled",
        mesh_msh=f"{out_prefix}/meshes/frequency_{{frequency}}_amplitude_{{amplitude}}.msh"
    log:
        f"{out_prefix}/meshes/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/mesh.py"

rule solve:
    input:
        mesh_msh=f"{out_prefix}/meshes/frequency_{{frequency}}_amplitude_{{amplitude}}.msh"
    output:
        solution_checkpoint_bp=directory(f"{out_prefix}/potential_{{potential}}/checkpoint/frequency_{{frequency}}_amplitude_{{amplitude}}.bp")
    log:
        f"{out_prefix}/potential_{{potential}}/checkpoint/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/solve.py"

rule interpolate:
    input:
        solution_checkpoint_bp=f"{out_prefix}/potential_{{potential}}/checkpoint/frequency_{{frequency}}_amplitude_{{amplitude}}.bp"
    output:
        interpolated_solution_checkpoint_bp=directory(f"{out_prefix}/potential_{{potential}}/interpolation/frequency_{{frequency}}_amplitude_{{amplitude}}.bp")
    log:
        f"{out_prefix}/potential_{{potential}}/interpolation/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/interpolate.py"

rule scale:
    input:
        interpolated_solution_checkpoint_bp=f"{out_prefix}/potential_{{potential}}/interpolation/frequency_{{frequency}}_amplitude_{{amplitude}}.bp"
    output:
        *[f"{out_prefix}/potential_{{potential}}/solutions/frequency_{{frequency}}_amplitude_{{amplitude}}_concentration_{i}.xdmf" for i in range(number_of_species)],
        dimensional_solution_checkpoint_bp=directory(f"{out_prefix}/potential_{{potential}}/solutions/frequency_{{frequency}}_amplitude_{{amplitude}}.bp"),
        dimensional_potential_xdmf=f"{out_prefix}/potential_{{potential}}/solutions/frequency_{{frequency}}_amplitude_{{amplitude}}_potential.xdmf"
    log:
        f"{out_prefix}/potential_{{potential}}/solutions/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/scale.py"

rule compute_volume_integrals:
     input:
        solution_checkpoint_bp=f"{out_prefix}/potential_{{potential}}/checkpoint/frequency_{{frequency}}_amplitude_{{amplitude}}.bp"
     output:
        json_file=f"{out_prefix}/potential_{{potential}}/volume_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}.json"
     log:
        f"{out_prefix}/potential_{{potential}}/volume_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
     script:
        "scripts/compute_volume_integrals.py"

rule compute_surface_charge:
    input:
        solution_checkpoint_bp=f"{out_prefix}/potential_{{potential}}/checkpoint/frequency_{{frequency}}_amplitude_{{amplitude}}.bp",
    output:
        json_file = f"{out_prefix}/potential_{{potential}}/surface_charge/frequency_{{frequency}}_amplitude_{{amplitude}}.json"
    log:
        f"{out_prefix}/potential_{{potential}}/surface_charge/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/compute_surface_charge.py"

rule compute_surface_integrals:
    input:
        solution_checkpoint_bp=f"{out_prefix}/potential_{{potential}}/checkpoint/frequency_{{frequency}}_amplitude_{{amplitude}}.bp",
        mesh_msh=f"{out_prefix}/meshes/frequency_{{frequency}}_amplitude_{{amplitude}}.msh"
    output:
        integrals_csv=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
    log:
        f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/compute_surface_integrals.py"

rule extract_surface_integrals_extrema:
    input:
        csv_file=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
    output:
        json_file = f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}.json",
    log:
        f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_extract_extrema.log"
    script:
        "scripts/extract_surface_integrals_extrema.py"

rule compute_surface_integrals_histograms:
    input:
        input_csv=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
    output:
        output_csv=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_histograms.csv",
    log:
        f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_compute_histograms.log"
    script:
        "scripts/compute_surface_integrals_histograms.py"

rule plot_profiles:
    input:
        mesh_msh=f"{out_prefix}/meshes/frequency_{{frequency}}_amplitude_{{amplitude}}.msh",
        json_file=f"{out_prefix}/roughness_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json"
    output:
        svg_file=f"{out_prefix}/profiles/frequency_{{frequency}}_amplitude_{{amplitude}}.svg",
        png_file=f"{out_prefix}/profiles/frequency_{{frequency}}_amplitude_{{amplitude}}.png"
    script:
        "scripts/plot_profiles.py"

rule plot_surface_excess_histograms:
    input:
        csv_file=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_histograms.csv",
        # reference_csv_file= f"{out_prefix}/potential_{{potential}}/surface_integrals/{reference_profile_label}_integrals.csv",
    output:
        svg_file=f"{out_prefix}/potential_{{potential}}/surface_excess_histogram_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess_histogram.svg",
        png_file=f"{out_prefix}/potential_{{potential}}/surface_excess_histogram_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess_histogram.png"
    log:
        f"{out_prefix}/potential_{{potential}}/surface_excess_histograms_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_plot_surface_excess_histograms.log"
    script:
        "scripts/plot_surface_excess_histograms.py"

rule gpr_on_surface_integrals:
    input:
        csv_file = f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
    output:
        ELBO_histogram_png=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/ELBO_histogram.png",
        minibatch_speedup_png=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/minibatch_speedup.png",
        predictions_before_training_png=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/predictions_before_training.png",
        convergence_png=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/convergence.png",
        predictions_after_training_png=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/predictions_after_training.png",
        X_txt=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/X.txt",
        predicted_Y_txt=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/predicted_Y.txt",
        predicted_variance_txt=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/predicted_variance.txt",
        model_txt=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/model.txt",
    log:
        f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{{species}}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/gpr_on_surface_integrals.log"
    script:
        "scripts/gpr_on_surface_integrals.py"

rule plot_surface_excess_local_with_gpr:
    input:
        csv_file = f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
        reference_csv_file= f"{out_prefix}/potential_{{potential}}/surface_integrals/{reference_profile_label}_integrals.csv",
        *[f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{i}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/X.txt" for i in range(number_of_species)],
        *[f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{i}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/predicted_Y.txt" for i in range(number_of_species)],
        *[f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{i}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/predicted_variance.txt" for i in range(number_of_species)],
    output:
        svg_file=f"{out_prefix}/potential_{{potential}}/surface_excess_local_with_gpr_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess_with_gpr_length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}.svg",
        png_file=f"{out_prefix}/potential_{{potential}}/surface_excess_local_with_gpr_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess_with_gpr_length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}.png"
    log:
        f"{out_prefix}/potential_{{potential}}/surface_excess_local_with_gpr_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_plot_surface_excess_local_length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}.log"
    script:
        "scripts/plot_surface_excess_local_with_gpr.py"

rule plot_surface_excess_local_with_rolling_mean:
    input:
        csv_file = f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
        reference_csv_file= f"{out_prefix}/potential_{{potential}}/surface_integrals/{reference_profile_label}_integrals.csv",
    output:
        svg_file=f"{out_prefix}/potential_{{potential}}/surface_excess_local_with_rolling_mean_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.svg",
        png_file=f"{out_prefix}/potential_{{potential}}/surface_excess_local_with_rolling_mean_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.png"
    log:
        f"{out_prefix}/potential_{{potential}}/surface_excess_local_with_rolling_mean_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_plot_surface_excess_local.log"
    script:
        "scripts/plot_surface_excess_local_with_rolling_mean.py"

rule plot_surface_excess_local:
    input:
        csv_file = f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
        reference_csv_file= f"{out_prefix}/potential_{{potential}}/surface_integrals/{reference_profile_label}_integrals.csv",
    output:
        svg_file=f"{out_prefix}/potential_{{potential}}/surface_excess_local_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.svg",
        png_file=f"{out_prefix}/potential_{{potential}}/surface_excess_local_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.png"
    log:
        f"{out_prefix}/potential_{{potential}}/surface_excess_local_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_plot_surface_excess_local.log"
    script:
        "scripts/plot_surface_excess_local.py"

rule plot_surface_excess_global_with_gpr:
    input:
        csv_file = f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
        reference_csv_file= f"{out_prefix}/potential_{{potential}}/surface_integrals/{reference_profile_label}_integrals.csv",
        *[f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{i}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/X.txt" for i in range(number_of_species)],
        *[f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{i}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/predicted_Y.txt" for i in range(number_of_species)],
        *[f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_excess_concentration_integral_{i}_gpr/length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}/predicted_variance.txt" for i in range(number_of_species)],
    output:
        svg_file=f"{out_prefix}/potential_{{potential}}/surface_excess_global_with_gpr_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess_with_gpr_length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}.svg",
        png_file=f"{out_prefix}/potential_{{potential}}/surface_excess_global_with_gpr_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess_with_gpr_length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}.png"
    log:
        f"{out_prefix}/potential_{{potential}}/surface_excess_global_with_gpr_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_plot_surface_excess_global_length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}.log"
    script:
        "scripts/plot_surface_excess_global_with_gpr.py"

rule plot_surface_excess_global:
    input:
        csv_file = f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
        reference_csv_file= f"{out_prefix}/potential_{{potential}}/surface_integrals/{reference_profile_label}_integrals.csv",
    output:
        svg_file=f"{out_prefix}/potential_{{potential}}/surface_excess_global_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.svg",
        png_file=f"{out_prefix}/potential_{{potential}}/surface_excess_global_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.png"
    log:
        f"{out_prefix}/potential_{{potential}}/surface_excess_global_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_plot_surface_excess_global.log"
    script:
        "scripts/plot_surface_excess_global.py"

rule plot_surface_excess_global_with_rolling_mean:
    input:
        csv_file = f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
        reference_csv_file= f"{out_prefix}/potential_{{potential}}/surface_integrals/{reference_profile_label}_integrals.csv",
    output:
        svg_file=f"{out_prefix}/potential_{{potential}}/surface_excess_global_with_rolling_mean_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.svg",
        png_file=f"{out_prefix}/potential_{{potential}}/surface_excess_global_with_rolling_mean_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.png"
    log:
        f"{out_prefix}/potential_{{potential}}/surface_excess_global_with_rolling_mean_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_plot_surface_excess_global.log"
    script:
        "scripts/plot_surface_excess_global.py"

rule compute_derived_properties:
    input:
        surface_charge_json_file= f"{out_prefix}/potential_{{potential}}/surface_charge/frequency_{{frequency}}_amplitude_{{amplitude}}.json",
        volume_integrals_json_file=f"{out_prefix}/potential_{{potential}}/volume_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}.json",
        profile_properties_json_file=f"{out_prefix}/potential_{{potential}}/profile_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json",
        roughness_properties_json_file=f"{out_prefix}/roughness_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json",
        surface_integrals_extrema_json_file=f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}.json",
    output:
        json_file=f"{out_prefix}/potential_{{potential}}/derived_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json"
    log:
        f"{out_prefix}/potential_{{potential}}/derived_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/compute_derived_properties.py"

rule compute_comparative_properties:
    input:
        json_file=f"{out_prefix}/potential_{{potential}}/derived_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json",
        reference_json_file=f"{out_prefix}/potential_{{potential}}/derived_properties/{reference_profile_label}.json",
    output:
        json_file=f"{out_prefix}/potential_{{potential}}/comparative_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json"
    log:
        f"{out_prefix}/potential_{{potential}}/comparative_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
         "scripts/compute_comparative_properties.py"

rule aggregate_volume_integrals:
    input:
        expand(f"{out_prefix}/potential_{{{{potential}}}}/volume_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}.json", frequency=frequency_values, amplitude=amplitude_values)
    output:
        csv_file=f"{out_prefix}/potential_{{potential}}/volume_integrals/volume_integrals.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file, index=False)

rule aggregate_surface_charges:
    input:
        expand(f"{out_prefix}/potential_{{{{potential}}}}/surface_charge/frequency_{{frequency}}_amplitude_{{amplitude}}.json", frequency=frequency_values, amplitude=amplitude_values)
    output:
        csv_file=f"{out_prefix}/potential_{{potential}}/surface_charge/surface_charge.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file, index=False)

rule aggregate_derived_properties:
    input:
        expand(f"{out_prefix}/potential_{{{{potential}}}}/derived_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json", frequency=frequency_values, amplitude=amplitude_values)
    output:
        csv_file=f"{out_prefix}/potential_{{potential}}/derived_properties/derived_properties.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file, index=False)

rule aggregate_comparative_properties:
    input:
        expand(f"{out_prefix}/potential_{{{{potential}}}}/comparative_properties/frequency_{{frequency}}_amplitude_{{amplitude}}.json", frequency=frequency_values, amplitude=amplitude_values)
    output:
        csv_file=f"{out_prefix}/potential_{{potential}}/comparative_properties/comparative_properties.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file, index=False)

rule aggregate_all:
    input:
        expand(f"{out_prefix}/potential_{{potential}}/comparative_properties/comparative_properties.csv", potential=potential_bias_values),
    output:
        csv_file=f"{out_prefix}/all.csv"
    run:
        import pandas as pd

        df = pd.concat(
            map(pd.read_csv, input), ignore_index=True)

        df.to_csv(output.csv_file, index=False)

rule plot_global_properties:
    input:
        csv_file=f"{out_prefix}/all.csv"
    output:
        output_dir=directory(f"{out_prefix}/global_properties_plots")
    script:
        "scripts/plot_global_properties.py"

rule plot:
    input:
        csv_file=f"{out_prefix}/potential_{{potential}}/volume_integrals/volume_integrals.csv"
    output:
        png_file=f"{out_prefix}/potential_{{potential}}/volume_integrals/volume_integrals.png"
    run:
        import pandas as pd
        import seaborn as sns

        df = pd.read_csv(input.csv_file)
        sns_plot = sns.scatterplot(data=df, x="profile", y="charge", hue="profile", style="profile")
        sns_plot.set_xticklabels(sns_plot.get_xticklabels(), rotation=45, horizontalalignment='right')
        # plt.gcf().set_size_inches(10, 6)
        fig = sns_plot.get_figure()
        fig.set_size_inches(10, 6)
        fig.tight_layout()
        fig.savefig(output.png_file)

rule generate_comparative_plots:
    input:
        csv_file=f"{out_prefix}/potential_{{potential}}/comparative_properties/comparative_properties.csv"
    output:
        output_dir=directory(f"{out_prefix}/potential_{{potential}}/comparative_plots")
    script:
        "scripts/generate_comparative_plots.py"

rule plot_solution_2d_global:
    priority: 50
    input:
        interpolated_solution_checkpoint_bp=f"{out_prefix}/potential_{{potential}}/interpolation/frequency_{{frequency}}_amplitude_{{amplitude}}.bp"
    output:
        *[f"{out_prefix}/potential_{{potential}}/plot_solution_2d_global/frequency_{{frequency}}_amplitude_{{amplitude}}_concentration_{i}.png" for i in range(number_of_species)],
        potential_png=f"{out_prefix}/potential_{{potential}}/plot_solution_2d_global/frequency_{{frequency}}_amplitude_{{amplitude}}_potential.png",
    log:
        f"{out_prefix}/potential_{{potential}}/plot_solution_2d_global/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/plot_solution_2d_global.py"

rule plot_solution_2d_local:
    priority: 50
    input:
        interpolated_solution_checkpoint_bp=f"{out_prefix}/potential_{{potential}}/interpolation/frequency_{{frequency}}_amplitude_{{amplitude}}.bp"
    output:
        *[f"{out_prefix}/potential_{{potential}}/plot_solution_2d_local/frequency_{{frequency}}_amplitude_{{amplitude}}_concentration_{i}.png" for i in range(number_of_species)],
        potential_png=f"{out_prefix}/potential_{{potential}}/plot_solution_2d_local/frequency_{{frequency}}_amplitude_{{amplitude}}_potential.png",
    log:
        f"{out_prefix}/potential_{{potential}}/plot_solution_2d_local/frequency_{{frequency}}_amplitude_{{amplitude}}.log"
    script:
        "scripts/plot_solution_2d_local.py"

rule plot_solution_1d:
    priority: 50
    output:
        png_file = f"{out_prefix}/potential_{{potential}}/plot_solution_1d/electrochemical_double_layer.png",
        svg_file = f"{out_prefix}/potential_{{potential}}/plot_solution_1d/electrochemical_double_layer.svg"
    log:
        f"{out_prefix}/potential_{{potential}}/plot_solution_1d/electrochemical_double_layer.log"
    script:
        "scripts/plot_solution_1d.py"

rule profiles:
    input:
        svg_file=expand(f"{out_prefix}/profiles/frequency_{{frequency}}_amplitude_{{amplitude}}.svg", frequency=frequency_values, amplitude=amplitude_values)

rule histograms:
    input:
        svg_file=expand(f"{out_prefix}/potential_{{potential}}/surface_excess_histogram_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess_histogram.svg",
                        frequency=frequency_values, amplitude=amplitude_values,potential=potential_bias_values)

rule comparative_plots:
    input:
        expand(f"{out_prefix}/potential_{{potential}}/comparative_plots", potential=potential_bias_values),

rule figures:
    input:
        csv_file=f"{out_prefix}/all.csv"
    output:
        surplus_surface_excess_potential_bias_svg=f"{out_prefix}/figures/surplus_surface_excess_potential_bias.svg",
        surplus_surface_excess_potential_bias_with_legend_svg=f"{out_prefix}/figures/surplus_surface_excess_potential_bias_with_legend.svg",
        relative_local_surface_excess_potential_bias_svg=f"{out_prefix}/figures/relative_local_surface_excess_potential_bias.svg",
        relative_local_surface_excess_potential_bias_with_legend_svg=f"{out_prefix}/figures/relative_local_surface_excess_potential_bias_with_legend.svg"
    log:
        notebook="figures/figures.ipynb"
    notebook:
        "notebook/figures.py.ipynb"

rule single_result:
    input:
        f"{out_prefix}/potential_{potential_bias_values[0]}/surface_integrals/frequency_{frequency_values[0]}_amplitude_{amplitude_values[0]}_integrals_with_gpr_length_scale_1_signal_variance_1e-4_length_scale_100_long_signal_variance_1.png",
        f"{out_prefix}/potential_{potential_bias_values[0]}/plot_solution_2d/frequency_{frequency_values[0]}_amplitude_{amplitude_values[0]}_potential.png"

rule all:
    input:
        expand(f"{out_prefix}/potential_{{potential}}/plot_solution_2d_global/frequency_{{frequency}}_amplitude_{{amplitude}}_potential.png",
            frequency=frequency_values, amplitude=amplitude_values, potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/plot_solution_2d_local/frequency_{{frequency}}_amplitude_{{amplitude}}_potential.png",
            frequency=frequency_values, amplitude=amplitude_values, potential=potential_bias_values),
        # expand(f"{out_prefix}/potential_{{potential}}/surface_excess_local_with_gpr_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess_with_gpr_length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}.png",
        #     potential=potential_bias_values,
        #     frequency=frequency_values, amplitude=amplitude_values,
        #     signal_variance=signal_variance_values,
        #     length_scale=length_scale_values,
        #     long_signal_variance=long_signal_variance_values,
        #     long_length_scale=long_length_scale_values),
        expand(f"{out_prefix}/potential_{{potential}}/surface_excess_local_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.png",
            frequency=frequency_values, amplitude=amplitude_values, potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/surface_excess_local_with_rolling_mean_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.png",
           frequency=frequency_values, amplitude=amplitude_values, potential=potential_bias_values),
        # expand(f"{out_prefix}/potential_{{potential}}/surface_excess_global_with_gpr_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess_with_gpr_length_scale_{{length_scale}}_signal_variance_{{signal_variance}}_length_scale_{{long_length_scale}}_long_signal_variance_{{long_signal_variance}}.png",
        #     potential=potential_bias_values,
        #     frequency=frequency_values, amplitude=amplitude_values,
        #     signal_variance=signal_variance_values,
        #     length_scale=length_scale_values,
        #     long_signal_variance=long_signal_variance_values,
        #     long_length_scale=long_length_scale_values),
        expand(f"{out_prefix}/potential_{{potential}}/surface_excess_global_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.png",
            frequency=frequency_values, amplitude=amplitude_values, potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/surface_excess_global_with_rolling_mean_plots/frequency_{{frequency}}_amplitude_{{amplitude}}_surface_excess.png",
           frequency=frequency_values, amplitude=amplitude_values, potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/surface_integrals/frequency_{{frequency}}_amplitude_{{amplitude}}_integrals.csv",
            frequency=frequency_values, amplitude=amplitude_values, potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/plot_solution_1d/electrochemical_double_layer.png", potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/volume_integrals/volume_integrals.png", potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/profile_properties/profile_properties.csv", potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/derived_properties/derived_properties.csv", potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/comparative_properties/comparative_properties.csv", potential=potential_bias_values),
        expand(f"{out_prefix}/potential_{{potential}}/comparative_plots", potential=potential_bias_values),
        f"{out_prefix}/all.csv",
        f"{out_prefix}/global_properties_plots",

rule global_properties_plots:
    input:
        directory(f"{out_prefix}/global_properties_plots"),

rule default:
    input:
        f"{out_prefix}/all.csv",
        f"{out_prefix}/global_properties_plots",
    default_target: True
