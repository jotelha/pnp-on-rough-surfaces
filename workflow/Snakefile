from snakemake.utils import min_version
min_version("6.0")

configfile: "workflow/config.yml"

out_prefix = config["out_prefix"]
in_prefix = config["in_prefix"]

profile_label_csv_mapping = {label: entry["file"] for label, entry in config["profiles"].items()}

profile_labels = list(config["profiles"].keys())

reference_profile_label = config["reference_profile_label"]

number_of_species = len(config["number_charges"])

rule homogenize:
    output:
        profile_csv=f"{out_prefix}/profiles/{{profile}}.csv"
    log:
        f"{out_prefix}/logs/005_homogenize/{{profile}}.log"
    run:
        import os.path
        import shutil
        import logging
        logging.basicConfig(filename=log[0], encoding='utf-8', level=logging.DEBUG)
        logger = logging.getLogger(__name__)
        infile = os.path.join(in_prefix, profile_label_csv_mapping[wildcards.profile])

        shutil.copy(infile, output.profile_csv)
        logger.info("Copied %s to %s", infile, output.profile_csv)

rule compute_profile_properties:
    input:
        profile_csv=f"{out_prefix}/profiles/{{profile}}.csv"
    output:
        json_file=f"{out_prefix}/profile_properties/{{profile}}.json"
    log:
        f"{out_prefix}/logs/008_compute_profile_properties/{{profile}}.log"
    script:
        "scripts/compute_profile_properties.py"

rule aggregate_profile_properties:
    input:
        expand(f"{out_prefix}/profile_properties/{{profile}}.json", profile=profile_labels)
    output:
        csv_file=f"{out_prefix}/profile_properties/profile_properties.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file)

rule mesh:
    input:
        profile_csv=f"{out_prefix}/profiles/{{profile}}.csv"
    output:
        geometry_geo=f"{out_prefix}/geometries/{{profile}}.geo_unrolled",
        mesh_msh=f"{out_prefix}/meshes/{{profile}}.msh"
    log:
        f"{out_prefix}/logs/010_mesh/{{profile}}.log"
    script:
        "scripts/mesh.py"

rule solve:
    input:
        mesh_msh=f"{out_prefix}/meshes/{{profile}}.msh"
    output:
        solution_checkpoint_bp=directory(f"{out_prefix}/checkpoint/{{profile}}.bp")
    log:
        f"{out_prefix}/logs/015_solve/{{profile}}.log"
    script:
        "scripts/solve.py"

rule interpolate:
    input:
        solution_checkpoint_bp=f"{out_prefix}/checkpoint/{{profile}}.bp"
    output:
        interpolated_solution_checkpoint_bp=directory(f"{out_prefix}/interpolation/{{profile}}.bp")
    log:
        f"{out_prefix}/logs/020_interpolate/{{profile}}.log"
    script:
        "scripts/interpolate.py"

rule scale:
    input:
        interpolated_solution_checkpoint_bp=f"{out_prefix}/interpolation/{{profile}}.bp"
    output:
        *[f"{out_prefix}/solutions/{{profile}}_concentration_{i}.xdmf" for i in range(number_of_species)],
        dimensional_solution_checkpoint_bp=directory(f"{out_prefix}/solutions/{{profile}}.bp"),
        dimensional_potential_xdmf=f"{out_prefix}/solutions/{{profile}}_potential.xdmf"
    log:
        f"{out_prefix}/logs/030_scale/{{profile}}.log"
    script:
        "scripts/scale.py"

rule compute_surface_integrals:
     input:
        solution_checkpoint_bp=f"{out_prefix}/checkpoint/{{profile}}.bp"
     output:
        json_file=f"{out_prefix}/surface_integrals/{{profile}}.json"
     log:
        f"{out_prefix}/logs/040_compute_surface_integrals/{{profile}}.log"
     script:
        "scripts/compute_surface_integrals.py"

rule compute_surface_charge:
    input:
        solution_checkpoint_bp=f"{out_prefix}/checkpoint/{{profile}}.bp",
    output:
        json_file = f"{out_prefix}/surface_charge/{{profile}}.json"
    log:
        f"{out_prefix}/logs/041_compute_surface_charge/{{profile}}.log"
    script:
        "scripts/compute_surface_charge.py"


rule compute_line_integrals:
    input:
        solution_checkpoint_bp=f"{out_prefix}/checkpoint/{{profile}}.bp",
        mesh_msh=f"{out_prefix}/meshes/{{profile}}.msh"
    output:
        integrals_csv=f"{out_prefix}/line_integrals/{{profile}}_integrals.csv",
    log:
        f"{out_prefix}/logs/042_compute_line_integrals/{{profile}}.log"
    script:
        "scripts/compute_line_integrals.py"

rule gpr_on_line_integrals:
    input:
        csv_file = f"{out_prefix}/line_integrals/{{profile}}_integrals.csv",
    output:
        ELBO_histogram_png=f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/ELBO_histogram.png",
        minibatch_speedup_png=f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/minibatch_speedup.png",
        predictions_before_training_png=f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/predictions_before_training.png",
        convergence_png=f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/convergence.png",
        predictions_after_training_png=f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/predictions_after_training.png",
        X_txt=f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/X.txt",
        predicted_Y_txt=f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/predicted_Y.txt",
        predicted_variance_txt=f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/predicted_variance.txt",
        model_txt=f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/model.txt",
    log:
        f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{{species}}_gpr/gpr_on_line_integrals.log"
    script:
        "scripts/gpr_on_line_integrals.py"

rule plot_gpr_on_line_integrals:
    input:
        csv_file = f"{out_prefix}/line_integrals/{{profile}}_integrals.csv",
        *[f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{i}_gpr/X.txt" for i in range(number_of_species)],
        *[f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{i}_gpr/predicted_Y.txt" for i in range(number_of_species)],
        *[f"{out_prefix}/line_integrals/{{profile}}_excess_concentration_integral_{i}_gpr/predicted_variance.txt" for i in range(number_of_species)],
    output:
        svg_file=f"{out_prefix}/line_integrals/{{profile}}_integrals_with_gpr.svg",
        png_file=f"{out_prefix}/line_integrals/{{profile}}_integrals_with_gpr.png"
    log:
        f"{out_prefix}/line_integrals/{{profile}}_plot_gpr_on_line_integrals.log"
    script:
        "scripts/plot_gpr_on_line_integrals.py"

rule plot_line_integrals:
    input:
        csv_file=f"{out_prefix}/line_integrals/{{profile}}_integrals.csv",
    output:
        svg_file=f"{out_prefix}/line_integrals/{{profile}}_integrals.svg",
        png_file=f"{out_prefix}/line_integrals/{{profile}}_integrals.png"
    script:
        "scripts/plot_line_integrals.py"

rule compute_derived_properties:
    input:
        surface_charge_json_file= f"{out_prefix}/surface_charge/{{profile}}.json",
        surface_integrals_json_file=f"{out_prefix}/surface_integrals/{{profile}}.json",
        profile_properties_json_file=f"{out_prefix}/profile_properties/{{profile}}.json"
    output:
        json_file=f"{out_prefix}/derived_properties/{{profile}}.json"
    log:
        f"{out_prefix}/logs/045_compute_derived_properties/{{profile}}.log"
    script:
        "scripts/compute_derived_properties.py"

rule compute_comparative_properties:
    input:
        json_file=f"{out_prefix}/derived_properties/{{profile}}.json",
        reference_json_file=f"{out_prefix}/derived_properties/{reference_profile_label}.json",
    output:
        json_file=f"{out_prefix}/comparative_properties/{{profile}}.json"
    log:
        f"{out_prefix}/logs/048_compute_comparative_properties/{{profile}}.log"
    script:
         "scripts/compute_comparative_properties.py"

rule aggregate_surface_integrals:
    input:
        expand(f"{out_prefix}/surface_integrals/{{profile}}.json", profile=profile_labels)
    output:
        csv_file=f"{out_prefix}/surface_integrals/surface_integrals.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file)

rule aggregate_surface_charges:
    input:
        expand(f"{out_prefix}/surface_charge/{{profile}}.json", profile=profile_labels)
    output:
        csv_file=f"{out_prefix}/surface_charge/surface_charge.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file)

rule aggregate_derived_properties:
    input:
        expand(f"{out_prefix}/derived_properties/{{profile}}.json", profile=profile_labels)
    output:
        csv_file=f"{out_prefix}/derived_properties/derived_properties.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file)

rule aggregate_comparative_properties:
    input:
        expand(f"{out_prefix}/comparative_properties/{{profile}}.json", profile=profile_labels)
    output:
        csv_file=f"{out_prefix}/comparative_properties/comparative_properties.csv"
    run:
        import json
        import pandas as pd

        data_records = []
        for json_file in input:
            with open(json_file, 'r') as file:
                data = json.load(file)
            data_records.append(data)

        df = pd.DataFrame.from_records(data_records)
        df.to_csv(output.csv_file)

rule plot:
    input:
        csv_file=f"{out_prefix}/surface_integrals/surface_integrals.csv"
    output:
        png_file=f"{out_prefix}/surface_integrals/surface_integrals.png"
    run:
        import pandas as pd
        import seaborn as sns

        df = pd.read_csv(input.csv_file)
        sns_plot = sns.scatterplot(data=df, x="profile", y="charge", hue="profile", style="profile")
        sns_plot.set_xticklabels(sns_plot.get_xticklabels(), rotation=45, horizontalalignment='right')
        # plt.gcf().set_size_inches(10, 6)
        fig = sns_plot.get_figure()
        fig.set_size_inches(10, 6)
        fig.tight_layout()
        fig.savefig(output.png_file)

rule generate_comparative_plots:
    input:
        csv_file=f"{out_prefix}/comparative_properties/comparative_properties.csv"
    output:
        output_dir=directory(f"{out_prefix}/comparative_plots")
    script:
        "scripts/generate_comparative_plots.py"

rule plot_solution_2d:
    input:
        interpolated_solution_checkpoint_bp=f"{out_prefix}/interpolation/{{profile}}.bp"
    output:
        *[f"{out_prefix}/plot_solution_2d/{{profile}}_concentration_{i}.png" for i in range(number_of_species)],
        potential_png=f"{out_prefix}/plot_solution_2d/{{profile}}_potential.png",
    log:
        f"{out_prefix}/logs/050_plot_solution_2d/{{profile}}.log"
    script:
        "scripts/plot_solution_2d.py"

rule single_result:
    input:
        # f"{out_prefix}/line_integrals/{profile_labels[0]}_excess_concentration_integral_0_gpr/model.txt",
        f"{out_prefix}/line_integrals/{profile_labels[0]}_integrals_with_gpr.png",
        f"{out_prefix}/plot_solution_2d/{profile_labels[0]}_potential.png"

rule default:
    input:
        expand(f"{out_prefix}/plot_solution_2d/{{profile}}_potential.png",  profile=profile_labels),
        expand(f"{out_prefix}/line_integrals/{{profile}}_integrals.csv", profile=profile_labels),
        expand(f"{out_prefix}/line_integrals/{{profile}}_integrals.png", profile=profile_labels),
        f"{out_prefix}/surface_integrals/surface_integrals.png",
        f"{out_prefix}/profile_properties/profile_properties.csv",
        f"{out_prefix}/derived_properties/derived_properties.csv",
        f"{out_prefix}/comparative_properties/comparative_properties.csv",
        f"{out_prefix}/comparative_plots"
        # expand(f"{out_prefix}/surface_integrals/{{profile}}.json",  profile=profile_labels)
    default_target: True

